{"version":3,"sources":["api/index.js","components/JobPost/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["getJobListing","path","config","method","mode","Promise","resolve","reject","a","fetch","progress","console","log","response","status","json","JobPost","job","Card","className","Body","Title","title","Subtitle","companyname","experience","Text","jd","type","location","skills","source","salary","startdate","Date","toLocaleDateString","enddate","Footer","variant","href","applylink","target","rel","App","state","jobs","query","filters","sortBy","onQuery","setState","updateFilter","key","indexOf","newFilters","filter","item","then","data","this","filteredJobs","createFilter","_","Container","Navbar","expand","bg","Brand","Row","style","paddingBottom","Col","lg","md","width","Form","onSubmit","e","preventDefault","onChange","Label","length","Check","inline","name","label","map","index","marginBottom","Spinner","animation","PureComponent","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8fc129c3.chunk.js","sourcesContent":["/* const getHeader = () =>\n  new Promise(async (resolve, reject) => {\n    try {\n      const userToken = await AsyncStorage.getItem(USER_TOKEN);\n\n      return resolve({\n        // \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userToken}`\n      });\n    } catch (error) {\n      return reject(error);\n    }\n  }); */\nconst HOST = \"https://nut-case.s3.amazonaws.com\";\nconst fetchUrl = (path, config) =>\n  new Promise(async (resolve, reject) => {\n    try {\n      let response = await fetch(`${HOST}/${path}`, config, progress =>\n        console.log(\"progress: \", progress)\n      );\n\n      if (response.status < 500) {\n        response = await response.json();\n\n        return resolve(response);\n      }\n\n      return resolve(response);\n    } catch (error) {\n      return reject(error);\n    }\n  });\n\nexport const getJobListing = () =>\n  fetchUrl(\"jobs.json\", { method: \"GET\", mode: \"cors\" });\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./JobPost.css\";\n\nfunction JobPost({ job }) {\n  return (\n    <Card className=\"Job-post\">\n      <Card.Body>\n        <Card.Title>{job.title}</Card.Title>\n        <Card.Subtitle>\n          {job.companyname} {job.experience && `- [${job.experience}]`}\n        </Card.Subtitle>\n        <Card.Text>\n          {job.title && <li>Job Title - {job.title}</li>}\n          {job.companyname && <li>Company - {job.companyname}</li>}\n          {job.experience && <li>Experience - {job.experience}</li>}\n          {job.jd && <li>Job Descriptiont - {job.jd}</li>}\n          {job.type && <li>Type - {job.type}</li>}\n          {job.location && <li>Location - {job.location}</li>}\n          {job.skills && <li>Skills - {job.skills}</li>}\n          {job.source && <li>Source - {job.source}</li>}\n          {job.salary && <li>Salary - {job.salary}</li>}\n          {job.startdate && (\n            <li>Start Date - {new Date(job.startdate).toLocaleDateString()}</li>\n          )}\n          {job.enddate && (\n            <li>End Date - {new Date(job.enddate).toLocaleDateString()}</li>\n          )}\n        </Card.Text>\n      </Card.Body>\n      <Card.Footer className=\"text-right\">\n        <a\n          className=\"btn btn-primary\"\n          variant=\"primary\"\n          href={job.applylink}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Apply\n        </a>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nexport default JobPost;\n","import React, { PureComponent } from \"react\";\nimport \"./App.css\";\n\nimport { getJobListing } from \"../../api\";\nimport {\n  Card,\n  Col,\n  Container,\n  Form,\n  Navbar,\n  Row,\n  Spinner\n} from \"react-bootstrap\";\nimport SearchInput, { createFilter } from \"react-search-input\";\nimport JobPost from \"../JobPost\";\nimport _ from \"underscore\";\n\nclass App extends PureComponent {\n  state = {\n    jobs: [],\n    query: \"\",\n    filters: [\"title\"],\n    sortBy: \"title\"\n  };\n\n  componentDidMount() {\n    getJobListing().then(jobs => this.setState({ jobs: jobs.data }));\n  }\n\n  onQuery = query => {\n    this.setState({ query });\n  };\n\n  updateFilter = key => {\n    const { filters } = this.state;\n\n    if (filters.indexOf(key) === -1) {\n      this.setState({ filters: [...filters, key] });\n    } else {\n      let newFilters = filters.filter(item => item !== key);\n\n      this.setState({ filters: newFilters });\n    }\n  };\n\n  sortBy = key => this.setState({ sortBy: key });\n\n  render() {\n    const { jobs, query, filters, sortBy } = this.state;\n    let filteredJobs = jobs.filter(createFilter(query, filters));\n\n    filteredJobs = _.sortBy(filteredJobs, sortBy);\n\n    return (\n      <Container>\n        <header className=\"header\">\n          <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n            <Container>\n              <Navbar.Brand href=\"#\">Job Portal</Navbar.Brand>\n            </Container>\n          </Navbar>\n        </header>\n        <section>\n          <Row\n            className=\"justify-content-md-center\"\n            style={{ paddingBottom: 10 }}\n          >\n            <Col lg={4} md={6}>\n              <Card bg=\"light\" style={{ width: \"20rem\" }}>\n                <Card.Body>\n                  <Form\n                    onSubmit={e => e.preventDefault()}\n                    className=\"text-center\"\n                  >\n                    <Form.Row>\n                      <Col>\n                        <SearchInput\n                          className=\"search-input\"\n                          onChange={this.onQuery}\n                        />\n                      </Col>\n                    </Form.Row>\n                    <Row>\n                      <Col>\n                        <Form.Label className=\"float-left\">\n                          <strong>Jobs found:</strong> {filteredJobs.length}\n                        </Form.Label>\n                      </Col>\n                    </Row>\n                    <Form.Row>\n                      <Col className=\"text-left\">\n                        <Form.Label>Filter By: </Form.Label>\n                        <br />\n                        <Form.Check\n                          inline\n                          name=\"location\"\n                          label=\"Location\"\n                          onChange={() => this.updateFilter(\"location\")}\n                        />\n                        <Form.Check\n                          inline\n                          name=\"skills\"\n                          label=\"Skills\"\n                          onChange={() => this.updateFilter(\"skills\")}\n                        />\n                        <Form.Check\n                          inline\n                          name=\"experience\"\n                          label=\"Experience\"\n                          onChange={() => this.updateFilter(\"experience\")}\n                        />\n                      </Col>\n                    </Form.Row>\n                    <Form.Row>\n                      <Col className=\"text-left\">\n                        <Form.Label>Sort By: </Form.Label>\n                        <br />\n                        <Form.Check\n                          inline\n                          type=\"radio\"\n                          name=\"sortBy\"\n                          label=\"Location\"\n                          onChange={() => this.sortBy(\"location\")}\n                        />\n                        <Form.Check\n                          inline\n                          type=\"radio\"\n                          name=\"sortBy\"\n                          label=\"Skills\"\n                          onChange={() => this.sortBy(\"skills\")}\n                        />\n                        <Form.Check\n                          inline\n                          type=\"radio\"\n                          name=\"sortBy\"\n                          label=\"Experience\"\n                          onChange={() => this.sortBy(\"experience\")}\n                        />\n                      </Col>\n                    </Form.Row>\n                  </Form>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </section>\n        <section className=\"\">\n          <Row className=\"\">\n            {filteredJobs.length > 0 ? (\n              filteredJobs.map((job, index) => (\n                // <Row key={`job-post-${index}`}>\n                <Col\n                  lg={4}\n                  md={6}\n                  key={`job-post-${index}`}\n                  style={{ marginBottom: 10 }}\n                >\n                  <JobPost job={job} />\n                </Col>\n                // </Row>\n              ))\n            ) : (\n              <Col className=\"Spinner-container\">\n                <Spinner animation=\"grow\" />\n              </Col>\n            )}\n          </Row>\n        </section>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}